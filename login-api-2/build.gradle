/*
 * Copyright (C) 2017 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply from: '../private-data/merge-private-data.gradle'

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.google.com' }
    flatDir {
        dirs "../espresso/aars"
    }
}

buildscript {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$GLOBAL_GRADLE_TOOLS_VERSION"
    }
}

String isTesting() {
    if ( System.getenv("IS_TESTING") == "true" ) {
        "true"
    } else {
        "false"
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        vectorDrawables.useSupportLibrary = true

        /* Add private data */
        mergePrivateData "login-api"

        /* BuildConfig Fields */
        buildConfigField "boolean", "IS_TESTING", isTesting()

        def privateProps = new Properties()
        privateProps.load(new FileInputStream("$projectDir/private.properties"))
        buildConfigField "String", "ZENDESK_DOMAIN", "\"${privateProps.zendeskDomain}\""
        buildConfigField "String", "ZENDESK_CREDENTIALS", "\"${privateProps.zendeskCredentials}\""
        buildConfigField "String", "ANONYMOUS_SCHOOL_DOMAIN", "\"${privateProps.anonymousSchoolDomain}\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}


configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}

dependencies {
    /* Modules */
    compile project(path: ':canvas-api-2', configuration: 'default')
    compile project(path: ':pandautils', configuration: 'default')

    /* Test Dependencies */
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.3.2'

    /* AndroidTest Dependencies */
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile project(':espresso')

    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.okhttp3:okhttp:3.7.0'
    compile('com.squareup.retrofit2:retrofit:2.2.0') {
        exclude module: 'okhttp'
    }

    compile rootProject.ext.supportDependencies.supportAnnotation
    compile rootProject.ext.supportDependencies.appCompat
    compile rootProject.ext.supportDependencies.supportLibV13
}

task copySnickerDoodles(type: Copy) {
    println("Copying Snicker Doodles")

    String baseDir = "$rootDir/../../"
    def snickerFileName = "snickers.json"

    File snickers = new File("$baseDir/$snickerFileName")

    if(snickers.exists()) {
        String dest = "$rootDir/../login-api-2/src/main/res/raw"

        File destDirFile = new File("$dest");
        if(!destDirFile.exists()) {
            destDirFile.mkdir();
        }

        File dst = new File("$dest/$snickerFileName")

        if (!dst.exists()) {
            dst.createNewFile()
            dst << snickers.bytes
        } else if (!md5(snickers).equals(md5(dst))) {
            dst.delete()
            dst << snickers.bytes
        }

        println("Snicker Doodles Ready to Consume")
    } else {
        println("Snicker Doodles Do Not Currently Exist")
    }
}

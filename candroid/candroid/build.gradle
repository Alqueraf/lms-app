/*
 * Copyright (C) 2016 - present  Instructure, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
    maven {
        url 'https://customers.pspdfkit.com/maven/'
        credentials {
            username pspdfMavenUser
            password pspdfMavenPass
        }
    }
    flatDir {
        dirs '../aars'
    }
}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        // https://bintray.com/android/android-tools/com.android.tools.build.gradle/view
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'spoon'
apply plugin: 'com.cookpad.android.licensetools'

// spoon reports have no logs or screenshots due to:
// https://github.com/square/spoon/issues/302#issuecomment-172625999
// https://code.google.com/p/android/issues/detail?id=195998
// square doesn't use spoon anymore :( https://github.com/square/spoon/issues/293#issuecomment-153219753
spoon { // ./gradlew :candroid:spoon
    debug = true

    // ./gradlew :candroid:spoon -PtestClass=com.instructure.candroid.test.LoginTest
    if (project.hasProperty('testClass')) {
        className = project.testClass
    }

    // ./gradlew :candroid:spoon -PtestClass=com.instructure.candroid.test.LoginTest -ptestMethod=loginRejectsInvalidCredentials
    if (project.hasProperty('testMethod')) {
        methodName = project.testMethod
    }
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':canvas-api')
    compile project(':login-api')
    compile project(':libraries:caldroid')
    compile project(':libraries:chips')
    compile project(':recyclerview')
    wearApp project(':wearable')

    androidTestCompile project(path: ':espresso')

    // unit test dependencies src/test
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile 'org.robolectric:robolectric:3.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.1@aar') {
        transitive = true;
    }
    compile('com.github.afollestad.material-dialogs:core:0.8.5.6@aar') {
        transitive = true
    }
    compile rootProject.ext.supportDependencies.recyclerView
    compile rootProject.ext.supportDependencies.cardView
    compile rootProject.ext.supportDependencies.design
    compile rootProject.ext.supportDependencies.gpsWearable
    compile rootProject.ext.supportDependencies.gcm
    compile rootProject.ext.supportDependencies.analytics
    compile rootProject.ext.supportDependencies.appCompat

    compile 'com.android.support:multidex:1.0.1'
    compile 'org.jsoup:jsoup:1.7.2'
    compile 'com.makeramen:roundedimageview:2.2.0'
    compile 'com.nineoldandroids:parent:2.2.0'
    compile 'com.pspdfkit:pspdfkit:2.9.0'
    compile 'io.reactivex:rxjava:1.1.9'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.google.api-client:google-api-client-android:1.18.0-rc'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.android.exoplayer:exoplayer:r2.1.1'
}

def appId = "com.instructure.candroid"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId appId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        multiDexEnabled = true
        testInstrumentationRunner 'com.instructure.espresso.InstructureRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        /* Add private data */
        buildConfigField "String", "PSPDFKIT_LICENSE_KEY", "\"$pspdfLicenseKey\""
        buildConfigField "String", "PUSH_SERVICE_PROJECT_ID", "\"$pushServiceProjectId\""
        addManifestPlaceholders([
                crashlyticsApiKey:"$crashlyticsApiKey"
        ])
    }

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file('../candroid.keystore')
            storePassword System.getenv('KEYSTORE_PASSWORD')
            keyAlias System.getenv('KEY_ALIAS')
            keyPassword System.getenv('KEY_PASSWORD')
        }
    }

    buildTypes {

        debug {
            testCoverageEnabled = project.hasProperty('testCoverageEnabled')
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            shrinkResources true
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        /*
        Resolves dependency versions across test and production APKs, specifically, transitive
        dependencies. This is required since Espresso internally has a dependency on support-annotations.
        https://github.com/googlecodelabs/android-testing/blob/57852eaf7df88ddaf828eca879a407f2249d5348/app/build.gradle#L86
        */
        resolutionStrategy.force rootProject.ext.supportDependencies.supportAnnotation
    }

    /*
    All direct/transitive dependencies shared between your test and production APKs need to be
    excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
    excluding these dependencies from your test configuration will result in an dex pre-verifier error
    at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
    */
    configurations.compile.dependencies.each { compileDependency ->
        println "Excluding compile dependency: ${compileDependency.getName()}"
        configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
            configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
        }
    }

    productFlavors {
        dev {

        }

        qa {

        }

        prod {

        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize '2g'
    }

    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
    }
}

/* Check licenses.yml, generate assets/licenses.html during build */
afterEvaluate {
  android.applicationVariants.all { variant ->
      variant.mergeAssets.dependsOn(generateLicensePage)
  }
}

apply plugin: 'com.google.gms.google-services'

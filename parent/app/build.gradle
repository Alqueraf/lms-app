/*
 * Copyright (C) 2016 - present  Instructure, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: 'jacoco.gradle' // ./gradlew testDevDebugUnitTestCoverage
apply plugin: 'com.google.gms.oss.licenses.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.google.com' }
    flatDir {
        dirs "../../espresso/aars"
    }
}

buildscript {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.google.com" }
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$GLOBAL_GRADLE_TOOLS_VERSION"
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.uber:infer-plugin:0.7.4'
    }
}

apply plugin: 'com.uber.infer.android' // ./gradlew inferDevDebug

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.instructure.parentapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        multiDexEnabled = true
        testInstrumentationRunner 'com.instructure.parentapp.ui.utils.ParentInstructureRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        buildConfigField "boolean", "IS_TESTING", "false"
        buildConfigField "boolean", "IS_ROBO_TEST", "false"
        buildConfigField "String", "GAMMA_DOMAIN", "\"\""
        buildConfigField "String", "EDGE_DOMAIN", "\"\""

        /* Fields for robo test flavor */
        buildConfigField "String", "ROBO_TEST_API_KEY", "\"\""
        buildConfigField "String", "ROBO_TEST_USER_ID", "\"\""
        buildConfigField "String", "ROBO_TEST_USERNAME", "\"\""

        /* Add private data */
        buildConfigField "String", "LOGIN_CLIENT_ID", "\"loginClientId\""
        buildConfigField "String", "LOGIN_CLIENT_SECRET", "\"$loginClientSecret\""
        addManifestPlaceholders([
                fabricApiKey:"$fabricApiKey"
        ])
    }

    productFlavors {

        dev {
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
        }

        prod { }

        qa {
            buildConfigField "boolean", "IS_TESTING", "true"
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
            buildConfigField "String", "EDGE_DOMAIN", "\"https://airwolf-edge.inseng.net\""
        }

        robo {
            buildConfigField "boolean", "IS_ROBO_TEST", "true"
            buildConfigField "String", "ROBO_TEST_API_KEY", "\"$roboTestApiKey\""
            buildConfigField "String", "ROBO_TEST_USER_ID", "\"$roboTestUserId\""
            buildConfigField "String", "ROBO_TEST_USERNAME", "\"$roboTestUsername\""
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
            buildConfigField "String", "EDGE_DOMAIN", "\"https://airwolf-edge.inseng.net\""
        }
    }

    buildTypes {
        debug {
            // ./gradlew -Pcoverage :app:assembleQaDebug :app:assembleQaDebugAndroidTest
            // ./gradlew :app:connectedQaDebugAndroidTest
            // ./gradlew :app:createQaDebugCoverageReport
            testCoverageEnabled = project.hasProperty('coverage')
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_TESTING", "false"
            buildConfigField "String", "GAMMA_DOMAIN", "\"\""
            buildConfigField "String", "EDGE_DOMAIN", "\"\""
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        // Required for Espresso.
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize '2g'
    }

    /*
    All direct/transitive dependencies shared between your test and production APKs need to be
    excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
    excluding these dependencies from your test configuration will result in an dex pre-verifier error
    at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
    https://github.com/googlecodelabs/android-testing/blob/49e2cf7584b7aee421630da07350d6e4ca2fe6f7/app/build.gradle#L91
    */
    configurations.compile.dependencies.each { compileDependency ->
        println "Excluding compile dependency: ${compileDependency.getName()}"
        configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
            configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':pandautils')
    compile ('com.jakewharton.espresso:okhttp3-idling-resource:1.0.0') {
        exclude module: 'espresso-idling-resource'
    }
    compile project(path: ':login-api-2', configuration: 'default')
    compile project(':recyclerview')

    /* Butter Knife */
    compile 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'

    compile 'com.github.rey5137:material:1.2.2'
    compile rootProject.ext.supportDependencies.design
    compile rootProject.ext.supportDependencies.percent
    compile "com.android.support:multidex:$GLOBAL_MULTI_DEX_VERSION"
    compile "com.google.android.gms:play-services-oss-licenses:$GLOBAL_PLAY_SERVICES_VERSION"
    compile('com.github.afollestad.material-dialogs:core:0.9.4.7') {
        transitive = true
    }

    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile('com.squareup.retrofit2:retrofit:2.2.0') {
        exclude module: 'okhttp'
    }

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile project(':espresso')
    testCompile project(':espresso')

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.4'
    compile("com.crashlytics.sdk.android:crashlytics:$GLOBAL_CRASHLYTICS_VERSION") {
        transitive = true;
    }
    //Needed for espresso test recorder
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

// ./gradlew -Pcoverage firebaseJacoco
task firebaseJacoco(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Firebase test lab."

    def flavor = 'qa'

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/${flavor}",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    // project.buildDir is /android-uno/parent/app/build
    sourceDirectories = files(['src/main/java'].plus(android.sourceSets[flavor].java.srcDirs))
    executionData = files("${project.buildDir}/firebase.ec")

    reports {
        // default path: /android-uno/parent/app/build/reports/jacoco/firebaseJacoco/html/
        html.enabled true
        csv.enabled  false
        xml.enabled  false
    }
}
